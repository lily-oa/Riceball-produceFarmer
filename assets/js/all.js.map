{"version":3,"sources":["all.js"],"names":["API","data","lists","filteredLists","form","document","querySelector","input","resetBtn","searchInfo","info","order","type","table","advanceSort","currentType","undefined","currentOrder","currentSearched","typeSearched","isDescending","getData","axios","get","then","response","filter","item","作物名稱","checkScore","score","Promise","resolved","reject","console","log","setTimeout"],"mappings":";;AAAA;AACA;AACA;AAEA;AACA,IAAMA,GAAG,GAAG,sDAAZ;AACA,IAAIC,IAAJ;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,aAAa,GAAG,EAApB,C,CAEA;;AACA,IAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAAb,C,CAA6D;;AAC7D,IAAMC,KAAK,GAAGF,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAd;AACA,IAAME,QAAQ,GAAGH,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAjB;AACA,IAAMG,UAAU,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,4BAAvB,CAAnB;AACA,IAAMI,IAAI,GAAGL,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAAb;AACA,IAAMK,KAAK,GAAGN,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAd;AACA,IAAMM,IAAI,GAAGP,QAAQ,CAACC,aAAT,CAAuB,sBAAvB,CAAb;AACA,IAAMO,KAAK,GAAGR,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAd;AACA,IAAMQ,WAAW,GAAGT,QAAQ,CAACC,aAAT,CAAuB,6BAAvB,CAApB,C,CAEA;;AACA,IAAIS,WAAW,GAAGC,SAAlB;AACA,IAAIC,YAAY,GAAGD,SAAnB;AACA,IAAIE,eAAe,GAAG,EAAtB;AACA,IAAIC,YAAY,GAAG,KAAnB;AACA,IAAIC,YAAY,GAAG,KAAnB;;AAEA,SAASC,OAAT,GAAkB;AAChBC,EAAAA,KAAK,CAACC,GAAN,CAAUvB,GAAV,EACCwB,IADD,CACM,UAASC,QAAT,EAAkB;AACtBxB,IAAAA,IAAI,GAAGwB,QAAQ,CAACxB,IAAT,CAAcyB,MAAd,CAAqB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAT;AAAA,KAAzB,CAAP;AACD,GAHD;AAID;;AAEDP,OAAO,G,CAEP;AACA;AAEA;AACA;;AAEA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5B,SAAO,IAAIC,OAAJ,CAAY,UAACC,QAAD,EAAWC,MAAX,EAAsB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAC,IAAAA,UAAU,CAAC,YAAM;AACf,UAAGN,KAAK,IAAI,EAAZ,EAAe;AACbE,QAAAA,QAAQ,CAACF,KAAD,CAAR;AACD,OAFD,MAEK;AACHI,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD;AACF,KANS,EAMP,IANO,CAAV;AAQD,GAVM,CAAP;AAWD,CAZD;;AAaAN,UAAU,CAAC,EAAD,CAAV,CACGL,IADH,CACQ,UAAAvB,IAAI;AAAA,SAAIiC,OAAO,CAACC,GAAR,CAAYlC,IAAZ,CAAJ;AAAA,CADZ,E,CAEE","file":"all.js","sourcesContent":["//搜尋(currentSearch)、排序(currentOrder)、種類(currentType)之間的交叉搜尋\n//清除查詢按鈕 (resetBtn)\n//搜尋結果現況展示 (info)\n\n// data\nconst API = 'https://hexschool.github.io/js-filter-data/data.json';\nlet data; \nlet lists = [];\nlet filteredLists = [];\n\n// DOM Element\nconst form = document.querySelector('[data-priceNet-form]'); //讀取文字的方式綁定\nconst input = document.querySelector('[data-priceNet-input]'); \nconst resetBtn = document.querySelector('[data-priceNet-reset]'); \nconst searchInfo = document.querySelector('[data-priceNet-searchInfo]'); \nconst info = document.querySelector('[data-priceNet-info]'); \nconst order = document.querySelector('[data-priceNet-order]'); \nconst type = document.querySelector('[data-priceNet-type]'); \nconst table = document.querySelector('[data-priceNet-table]'); \nconst advanceSort = document.querySelector('[data-priceNet-advanceSort]'); \n\n// State\nlet currentType = undefined;\nlet currentOrder = undefined;\nlet currentSearched = '';\nlet typeSearched = false;\nlet isDescending = false;\n\nfunction getData(){\n  axios.get(API)\n  .then(function(response){\n    data = response.data.filter(item => item.作物名稱);\n  });\n}\n\ngetData();\n\n// ---------------------學習 Promise Async Await----------\n// promise\n\n//檢查成績分數\n//第一個 promise\n\nconst checkScore = (score) => {\n  return new Promise((resolved, reject) => {\n    console.log('正在觀察是否及格');\n    setTimeout(() => {\n      if(score >= 60){\n        resolved(score);\n      }else{\n        console.log('不及格');\n      }\n    }, 3000);\n    \n  });  \n}\ncheckScore(60)\n  .then(data => console.log(data));\n  // .catch(error => console.log(error));\n\n"]}