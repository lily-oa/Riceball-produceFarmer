{"version":3,"sources":["all.js"],"names":["API","data","lists","filteredLists","form","document","querySelector","input","resetBtn","searchInfo","info","order","type","table","advanceSort","currentType","undefined","currentOrder","currentSearched","typeSearched","isDescending","getData","axios","get","then","response","filter","item","作物名稱","url","getURL","Promise","resolve","reject","xhr","XMLHttpRequest","open","onload","responseText","onerror","statusTest","send","console","log","error"],"mappings":";;AACA;AACA;AACA;;AAEA;AACA,IAAMA,GAAG,GAAG,sDAAsD;AAClE,IAAIC,IAAI;AACR,IAAIC,KAAK,GAAG,EAAE;AACd,IAAIC,aAAa,GAAG,EAAE;;AAEtB;AACA,IAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC,CAAC,CAAC;AAC7D,IAAMC,KAAK,GAAGF,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;AAC7D,IAAME,QAAQ,GAAGH,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;AAChE,IAAMG,UAAU,GAAGJ,QAAQ,CAACC,aAAa,CAAC,4BAA4B,CAAC;AACvE,IAAMI,IAAI,GAAGL,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;AAC3D,IAAMK,KAAK,GAAGN,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;AAC7D,IAAMM,IAAI,GAAGP,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC;AAC3D,IAAMO,KAAK,GAAGR,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;AAC7D,IAAMQ,WAAW,GAAGT,QAAQ,CAACC,aAAa,CAAC,6BAA6B,CAAC;;AAEzE;AACA,IAAIS,WAAW,GAAGC,SAAS;AAC3B,IAAIC,YAAY,GAAGD,SAAS;AAC5B,IAAIE,eAAe,GAAG,EAAE;AACxB,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,YAAY,GAAG,KAAK;AAExB,SAASC,OAAO,GAAE;EAChBC,KAAK,CAACC,GAAG,CAACvB,GAAG,CAAC,CACbwB,IAAI,CAAC,UAASC,QAAQ,EAAC;IACtBxB,IAAI,GAAGwB,QAAQ,CAACxB,IAAI,CAACyB,MAAM,CAAC,UAAAC,IAAI;MAAA,OAAIA,IAAI,CAACC,IAAI;IAAA,EAAC;EAChD,CAAC,CAAC;AACJ;AAEAP,OAAO,EAAE;;AAET;AACA;AACA,IAAMQ,GAAG,GAAG,4FAA4F;AACxG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASC,MAAM,CAACD,GAAG,EAAC;EAClB,OAAO,IAAIE,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAG;IACpC,IAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE;IAChCD,GAAG,CAACE,IAAI,CAAC,KAAK,EAAEP,GAAG,CAAC;IACpBK,GAAG,CAACG,MAAM,GAAG;MAAA,OAAML,OAAO,CAACE,GAAG,CAACI,YAAY,CAAC;IAAA,EAAC,CAAC;IAC9CJ,GAAG,CAACK,OAAO,GAAG;MAAA,OAAMN,MAAM,CAACC,GAAG,CAACM,UAAU,CAAC;IAAA,EAAC,CAAE;IAC7CN,GAAG,CAACO,IAAI,EAAE,CAAC,CAAC;EACd,CAAC,CAAC;AACJ;;AAEAX,MAAM,CAACD,GAAG,CAAC,CACRL,IAAI,CAAC,UAAAvB,IAAI;EAAA,OAAIyC,OAAO,CAACC,GAAG,CAAC1C,IAAI,CAAC;AAAA,EAAC,SAC1B,CAAC,UAAA2C,KAAK;EAAA,OAAIF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;AAAA,EAAC","file":"all.js","sourcesContent":["\n//搜尋(currentSearch)、排序(currentOrder)、種類(currentType)之間的交叉搜尋\n//清除查詢按鈕 (resetBtn)\n//搜尋結果現況展示 (info)\n\n// data\nconst API = 'https://hexschool.github.io/js-filter-data/data.json';\nlet data; \nlet lists = [];\nlet filteredLists = [];\n\n// DOM Element\nconst form = document.querySelector('[data-priceNet-form]'); //讀取文字的方式綁定\nconst input = document.querySelector('[data-priceNet-input]'); \nconst resetBtn = document.querySelector('[data-priceNet-reset]'); \nconst searchInfo = document.querySelector('[data-priceNet-searchInfo]'); \nconst info = document.querySelector('[data-priceNet-info]'); \nconst order = document.querySelector('[data-priceNet-order]'); \nconst type = document.querySelector('[data-priceNet-type]'); \nconst table = document.querySelector('[data-priceNet-table]'); \nconst advanceSort = document.querySelector('[data-priceNet-advanceSort]'); \n\n// State\nlet currentType = undefined;\nlet currentOrder = undefined;\nlet currentSearched = '';\nlet typeSearched = false;\nlet isDescending = false;\n\nfunction getData(){\n  axios.get(API)\n  .then(function(response){\n    data = response.data.filter(item => item.作物名稱);\n  });\n}\n\ngetData();\n\n// ---------------------學習 Promise Async Await----------\n// fetch\nconst url = 'https://raw.githubusercontent.com/hexschool/2021-ui-frontend-job/master/frontend_data.json';\n// fetch(url)\n//   .then(response => response.json())\n//   .then(data => console.log(data))\n//   .catch(error => console.log(error));\n\n// const xhr = new XMLHttpRequest();\n// xhr.open(\"GET\", url);\n// xhr.onload = () => console.log(xhr.responseText); //載入若是成功，回傳文字資料\n// xhr.onerror = () => console.log(xhr.statusTest);  //載入失敗，回傳狀態的 code\n// xhr.send(); //把它送出去\n\n// 試著將它改寫為非定步的寫法\nfunction getURL(url){\n  return new Promise((resolve, reject)=>{\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url);\n    xhr.onload = () => resolve(xhr.responseText); //載入若是成功，回傳文字資料\n    xhr.onerror = () => reject(xhr.statusTest);  //載入失敗，回傳狀態的 code \n    xhr.send(); //把它送出去\n  })\n}\n\ngetURL(url)\n  .then(data => console.log(data))\n  .catch(error => console.log(error));"]}